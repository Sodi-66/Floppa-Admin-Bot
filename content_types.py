import sqlite3
import utils
import commands
from telebot import types
from config import chat_states, main_markup
from config import bot


@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_members(message):
    for new_member in message.new_chat_members:

        bot.send_message(message.chat.id, f'–ö—É –±–ª—è—Ç—å,*{new_member.first_name}*, –µ–±–∞–Ω—ã–π —Ç—ã –±–∞–∫–ª–∞–∂–∞–Ω!üçÜ'
                                          '\n *–í–≤–µ–¥–∏ –∫–æ–∞–Ω–¥—É /based* —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∂–æ—Å–∫–æ –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º(–Ω–æ–π).üòéü§ô'
                                          '\n–í–≤–µ–¥–∏ /help - —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.üìã',parse_mode='Markdown')

        with open('hi_floppa.jpg', 'rb') as image_hi:
            bot.send_photo(message.chat.id, image_hi)


@bot.message_handler(content_types=['left_chat_member'])
def farewell_member(message):
    left_member = message.left_chat_member

    bot.send_message(message.chat.id, f'–ü–∏–∑–¥–µ—Ü!ü§Ø –£ –Ω–∞—Å –ø–æ—Ç–µ—Ä–∏! {left_member.first_name} –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å.üòß')

    with open('floppa_sadge.jpg', 'rb') as image_sadge:
        bot.send_photo(message.chat.id, image_sadge)


@bot.message_handler(content_types=['text'])
def text_message(message):

    if message.text.strip().lower() == '–ø–µ–ª—å–º–µ–Ω–∏' or message.text.strip().lower() == '–ø–µ–ª—å–º–µ–Ω—å':
        with open('–•–æ—Ä–æ—à–∏–µ –ø–µ–ª—å–º–µ–Ω–∏ —ç—Ç–æ –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ (by DailyRay ‚ô™).mp4', 'rb') as video_dumpling:
            bot.send_video(message.chat.id, video_dumpling)
        with open('floppa_dumpling.jpg', 'rb') as image_dumpling:
            bot.send_photo(message.chat.id, image_dumpling)
        bot.reply_to(message, 'ü•ü*–•–û–†–û–®–ò–ï –ü–ï–õ–¨–ú–ï–ù–ò –≠–¢–û –ï–ë–ê–¢–¨ –ö–ê–ö –í–ö–£–°–ù–û!*ü•ü', parse_mode='Markdown')

    if '—Ö—É–π' in message.text.strip().lower():
        with open('–®–ª–µ–ø–∞ —Å–∫–∞–∑–∞–ª —Ö—É–π.mp4', 'rb') as video_huy:
            bot.send_video(message.chat.id, video_huy)
        bot.reply_to(message, '*–•–•–•–•–•–•–•–•–•–•–•–•–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£'
                              '–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£'
                              '–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£'
                              '–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£'
                              '–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£'
                              '–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£'
                              '–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–£–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô–ô*',
                     parse_mode='Markdown')

    if message.text.strip().lower() == '–ø—Ä–∏–≤–µ—Ç' or message.text.strip().lower() == '–∑–¥–∞—Ä–æ–≤–∞' \
            or message.text.strip().lower() == '–∫—É':
        bot.reply_to(message, '–ó–¥–∞—Ä–æ–≤–∞, —á–µ–ª! üëãüòº')
        with open('floppa_hhuy.jpg', 'rb') as image_hhuy:
            bot.send_photo(message.chat.id, image_hhuy)

    if '–≤–∏—Ç—è' in message.text.strip().lower() or '—é–¥–∏–Ω' in message.text.strip().lower():
        with open('Stive_Flopps.jpg', 'rb') as image_flopps:
            bot.send_photo(message.chat.id, image_flopps)

    if message.text.strip().lower() == '–≥–æ—à–∞' or message.text.strip().lower() == '–≥–ª–∞–¥—ã—Ä':
        bot.reply_to(message, 'üòé–ú–µ–≥–∞ –∫—Ä—É—Ç–æ–π —á–µ–ª.üòé')
        with open('Goshagif.gif', 'rb') as gif_gosh:
            bot.send_animation(message.chat.id, gif_gosh)

    if message.text.strip().lower() == '–≥–æ—à–∞ –ª–æ—Ö' or '—à–ª—ë–ø–∞ –ª–æ—Ö' in message.text.strip().lower():
        bot.reply_to(message, 'ü§¨ –ú–∞–º–∞ —Ç–≤–æ–π –ª–æ—Ö! –©—ç—Ä—Å—Ç—å –π–æ–±–∞–Ω–∞–π. ü§¨')

        utils.short_mute(message)
        utils.point_messages_minus_200(message)

    if message.text.strip().lower() == '–º–æ—è —Å—Ç–∞—Ç–∞':
        commands.self_data(message)

    if message.text.strip().lower() == '—Å—Ç–∞—Ç–∞ —á–∞—Ç–∞':
        commands.get_users(message)

    if message.text.strip().lower() == '–∏–≥—Ä—ã':
        markup_game = types.InlineKeyboardMarkup(row_width=2)
        markup_game.add(types.InlineKeyboardButton('–ß–∏—Å–ª–∞', callback_data='numbers'),
                        types.InlineKeyboardButton('–ö–ù–ë', callback_data='rock_paper_scissors'),
                        types.InlineKeyboardButton('–†—ã–±–∞–ª–∫–∞', callback_data='fishing'))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—ÉüéÆ:", reply_markup=markup_game)

    if message.text.strip().lower() == '–∫–æ–º–∞–Ω–¥—ã':
        commands.help_message(message)

    if message.text.strip().lower() == '–∫–∞–º–µ–Ω—å':
        bot.send_message(message.chat.id, '–ù–µ—Ç –±–ª—è—Ç—å, –±—É–º–∞–≥–∞ üìÑ', reply_markup=main_markup)

    if message.text.strip().lower() == '–Ω–æ–∂–Ω–∏—Ü—ã':
        bot.send_message(message.chat.id, '–ù–µ—Ç –±–ª—è—Ç—å, –∫–∞–º–µ–Ω—å üóø', reply_markup=main_markup)

    if message.text.strip().lower() == '–±—É–º–∞–≥–∞':
        bot.send_message(message.chat.id, '–ù–µ—Ç –±–ª—è—Ç—å, –Ω–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è', reply_markup=main_markup)

    point_messages(message)
    play_game(message)


@bot.message_handler(func=lambda message: True)
def play_game(message):
    chat_id = message.chat.id
    if chat_id in chat_states:
        guessed_number = chat_states[chat_id]['guessing_number']
        try:
            guess = int(message.text)
            if guess == guessed_number:
                bot.send_message(chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! *–¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ!* üëè +15 –ø–µ–ª—å–º–µ–Ω–µ–π —ç—Ç–æ–º—É —á–µ–ª—É! ‚¨ÜÔ∏è‚úÖü•ü",
                                 parse_mode='Markdown')
                utils.point_message_plus_fiveteen(message)
                with open('floppa_dumpling.jpg', 'rb') as image_dumpling:
                    bot.send_photo(message.chat.id, image_dumpling)
                del chat_states[chat_id]
            elif guess < guessed_number:
                bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π –±–æ–ª—å—à–µ! -4 –ø–µ–ª—å–º–µ–Ω—è ‚ùó‚¨áÔ∏èü•ü")
                utils.point_messages_minus_four(message)
            else:
                bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π –º–µ–Ω—å—à–µ! -4 –ø–µ–ª—å–º–µ–Ω—è ‚ùóÔ∏è‚¨áÔ∏èü•ü")
                utils.point_messages_minus_four(message)
        except ValueError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, *–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.* üòæ‚ùóÔ∏è", parse_mode='Markdown')


@bot.message_handler(func=lambda message: True)
def point_messages(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points + 1 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()

    utils.update_levels(message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
