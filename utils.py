import sqlite3
import time
from telebot import types
from config import bot


def user_name(message):
    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else 'govno'
    name = message.from_user.first_name

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("INSERT INTO users (user_id, username, name, pass) VALUES (?, ?, ?, ?)",
                (user_id, username, name, ''))
    conn.commit()

    cur.close()
    conn.close()

    bot.send_message(message.chat.id, f'*–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã*üéâ:\n–ò–º—è - {name}\nUsername - {username}',
                     parse_mode='Markdown')


def short_mute(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    firstname_user = message.from_user.first_name
    user_status = bot.get_chat_member(chat_id, user_id).status

    if user_status == 'administrator' or user_status == 'creator':
        bot.reply_to(message, f'–í—ã —Å—É–∫–∞ *–ø—ã—Ç–∞–µ—Ç–µ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∞*, {firstname_user}. –ü–æ—ç—Ç–æ–º—É –∏–¥–∏ —Ç—ã –Ω–∞—Ö—É–π ' 
                     'üñïüèøüò†', parse_mode='Markdown')
        with open('big-floppa.gif', 'rb') as gif_nahuy:
            bot.send_animation(message.chat.id, gif_nahuy)
    else:
        duration = 60

        bot.restrict_chat_member(chat_id, user_id, until_date=time.time() + duration * 60)
        bot.reply_to(message, f'–ó–∞–≤–∞–ª–∏–ª –µ–±–ª–∏—â–µ, *{firstname_user}*!ü§¨ –ó–∞–º—É—á–µ–Ω –Ω–∞ *{duration} –º–∏–Ω—É—Ç—ã*!üïû ',
                     parse_mode='Markdown')
        with open('floppa_mute.gif', 'rb') as gif_mute:
            bot.send_animation(message.chat.id, gif_mute)


def update_levels(message):

    first_name = message.from_user.first_name

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("SELECT user_id, points, level FROM users")
    user_levels = cur.fetchall()

    for user_id, points, old_level in user_levels:
        new_level = 0
        level_cost = 100  # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è

        while points >= level_cost:
            new_level += 1
            level_cost += 85 + new_level * 100  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è

        if new_level > old_level:
            bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {first_name}!ü•≥ *–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: {new_level}!*'
                             '\n–®–ª—ë–ø–∞ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π!üêà –ú–∏—Å–∫—É –º—è—Ç–Ω—ã—Ö –ø—Ä—è–Ω–∏–∫–æ–≤ –µ–º—É!ü•£üç©\n‚ûï1Ô∏è‚É£5Ô∏è‚É£ *–∫ —à–ª—ë–ø–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É*',
                             parse_mode='Markdown')
            cur.execute("UPDATE users SET level = ? WHERE user_id = ?", (new_level, user_id))
            with open('vdacha!.gif', 'rb') as image_vdacha:
                bot.send_animation(message.chat.id, image_vdacha)

        elif new_level < old_level:
            bot.send_message(message.chat.id, f'{first_name.title()}, *–≤–∞—à —É—Ä–æ–≤–µ–Ω—å —É–º–µ–Ω—å—à–∏–ª—Å—è –¥–æ: {new_level}.*üò≠ –¢—ã '
                                              f'–ø–∞–ª –≤ –≥–ª–∞–∑–∞—Ö –®–ª—ë–ø—ã.üò°\n‚ûñ1Ô∏è‚É£5Ô∏è‚É£ *–∫ —à–ª—ë–ø–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É!*',
                             parse_mode='Markdown')
            cur.execute("UPDATE users SET level = ? WHERE user_id = ?", (new_level, user_id))

    conn.commit()
    conn.close()


def create_rps_inline_markup():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton('–ö–∞–º–µ–Ω—å', callback_data='–∫–∞–º–µ–Ω—å'),
               types.InlineKeyboardButton('–ù–æ–∂–Ω–∏—Ü—ã', callback_data='–Ω–æ–∂–Ω–∏—Ü—ã'),
               types.InlineKeyboardButton('–ë—É–º–∞–≥–∞', callback_data='–±—É–º–∞–≥–∞'))
    return markup


def determine_winner(user_choice, bot_choice):
    if user_choice == bot_choice:
        return "–ù–∏—á—å—è!üòæ"
    elif (user_choice == '–∫–∞–º–µ–Ω—å' and bot_choice == '–Ω–æ–∂–Ω–∏—Ü—ã') or \
            (user_choice == '–Ω–æ–∂–Ω–∏—Ü—ã' and bot_choice == '–±—É–º–∞–≥–∞') or \
            (user_choice == '–±—É–º–∞–≥–∞' and bot_choice == '–∫–∞–º–µ–Ω—å'):
        return "–¢—ã –ø–æ–±–µ–¥–∏–ª –®–ª—ë–ø—É!üòø"
    else:
        return "–®–ª—ë–ø–∞ –ø–æ–±–µ–¥–∏–ª!üò∏"


def point_messages_plus_twenty(user_id):

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points + 20 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_plus_two(user_id):

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points + 2 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_message_plus_five(user_id):

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points + 5 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_minus_fishing(user_id):

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points - 6 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_minus(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points - 6 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_plus_ten_rps(user_id):
    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points + 10 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_minus_ten_rps(user_id):
    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points - 10 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_plus_ten(user_id):

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points + 10 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_minus_twenty_fishing(user_id):

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points - 20 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_minus_twenty(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points - 20 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_minus_ten(user_id):

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points - 10 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_minus_four(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points - 4 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_messages_minus_200(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points - 200 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()


def point_message_plus_fiveteen(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("UPDATE users SET points = points + 15 WHERE user_id=?", (user_id,))
    conn.commit()

    conn.close()