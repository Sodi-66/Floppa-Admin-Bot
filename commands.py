import telebot
from telebot import types
import time
import sqlite3
import random
import utils
from config import main_markup, bot
from utils import user_name, short_mute
import config


def start_message(message):

    first_name = message.from_user.first_name

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É', url='https://t.me/tiltyxa'))

    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, *{first_name}*!üò∏–ê–¥–º–∏–Ω-—à–ª—ë–ø–∞ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ '
                                      '–º—É—Ç–∏—Ç—å, –±–∞–Ω–∏—Ç—å,'' –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø  –≤ –≤–∞—à–µ–º —á–∞—Ç–µ. üê±–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º—É—Ç–∏—Ç –∑–∞'
                                      '–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –º—É—Ç-—Å–ª–æ–≤–∞, –≤—ã–¥–∞—ë—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –¥–æ–±–∞–ª–≤—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–±–∞–≤–Ω—ã—Ö '
                                      '–∏–≥—Ä –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É'' –∏ –¥—Ä—É–≥–æ–µ. üêà‚Äç‚¨õ –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –∫ '
                                      '—Å–≤–æ–µ–π –±–µ—Å–µ–¥–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */help* üÜò –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö '
                                      '–∫–æ–º–∞–Ω–¥.\n*–î–ª—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–æ–º - @tiltyxa*', reply_markup=keyboard,
                     parse_mode='Markdown')

    with open('hi_floppa.jpg', 'rb') as image_hi:
        bot.send_photo(message.chat.id, image_hi)


# –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• - –î–í–ï –¢–ê–ë–õ–ò–¶–´: –î–ê–ù–ù–´–ï –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–• –ò –¢–ê–ë–õ–ò–¶–ê –û –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø.
def create_base(message):

    first_name = message.from_user.first_name

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    user_id = message.from_user.id
    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    existing_user = cur.fetchone()

    if existing_user:
        bot.send_message(message.chat.id, f'*{first_name}*, —Ç—ã —É–∂–µ –±–∞–∑–∏—Ä–æ–≤–∞–Ω(–∞)üòéü§ô. –ö—É–¥–∞ —Ç–µ–±–µ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑‚ùì',
                         reply_markup=main_markup, parse_mode='Markdown')
        with open('baza.gif', 'rb') as gif_antibase:
            bot.send_animation(message.chat.id, gif_antibase)

    else:
        cur.execute('''CREATE TABLE IF NOT EXISTS users (
                                id INTEGER PRIMARY KEY AUTOINCREMENT,
                                user_id INTEGER,
                                username TEXT,
                                name TEXT,
                                pass TEXT,
                                points INTEGER DEFAULT 0,
                                level INTEGER DEFAULT 0
                            )''')
        cur.execute('''CREATE TABLE IF NOT EXISTS warnings(
                                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                                    user_id INTEGER,
                                    chat_id INTEGER,
                                    username TEXT
                                )''')

        conn.commit()

        bot.send_message(message.chat.id, 'üòéü§ô–û—É—É—É –º—ç–Ω, —Ç—ã –∑–∞—Ä–µ–≥–∞–Ω –≤ –±–∞–∑—É —à–ª—ë–ø.üêà', reply_markup=main_markup)
        with open('babza_main.gif', 'rb') as gif_base:
            bot.send_animation(message.chat.id, gif_base)

        bot.register_next_step_handler(message, user_name)

    cur.close()
    conn.close()


def get_users(message):

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("SELECT users.*, COUNT(warnings.id) FROM users LEFT JOIN warnings ON users.user_id = warnings.user_id "
                "GROUP BY users.id")
    users_data = cur.fetchall()

    conn.close()

    if users_data:
        response = '–°–ø–∏—Å–æ–∫ —á–∞—Ç–µ—Ä–æ–≤üìã: \n'
        for user in users_data:
            response += f'\nUser üÜî: {user[0]}\nUsername: {user[2]}üë®‚Äçü¶∞\n–ò–º—è: {user[3]}üßë\n–ü–µ–ª—å–º–µ–Ω–∏: {user[5]}ü•ü' \
                        f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user[7]}‚ö†Ô∏è\n–£—Ä–æ–≤–µ–Ω—å: {user[6]}üòº\n'
    else:
        response = '–ë–∞–∑–∞ —à–ª—ë–ø –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—É—Å—Ç–∞.ü§∑'

    bot.send_message(message.chat.id, response)


def self_data(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('personal.sql')
    cur = conn.cursor()

    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user_data = cur.fetchone()

    if user_data:
        warnings_count = cur.execute("SELECT COUNT(*) FROM warnings WHERE user_id = ?", (user_id,)).fetchone()[0]
        user_level = user_data[6]  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ level

        response = (f'User üÜî: {user_data[0]}\nUsername: {user_data[2]}üë®‚Äçü¶∞\n–ò–º—è: {user_data[3]}üßë'
                   f'\n–ü–µ–ª—å–º–µ–Ω–∏: {user_data[5]}ü•ü'f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}‚ö†Ô∏è'
                   f'\n–£—Ä–æ–≤–µ–Ω—å: {user_level}üòº')

    else:
        response = '–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.üòï\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /based'

    conn.close()

    bot.send_message(message.chat.id, response)
    with open('self.gif', 'rb') as gif_self_data:
        bot.send_animation(message.chat.id, gif_self_data)


def help_message(message):

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É', url='https://t.me/tiltyxa'))

    bot.send_message(message.chat.id, '*–°–ü–ò–°–û–ö –í–°–ï–• –ö–û–ú–ê–ù–îüìã:*\n\n*/kick* - –∫–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–µ—Å–µ–¥—ã.üëä'
                                      '–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–µ—Ä–∞.üßç‚Äç‚ôÇÔ∏è\n*/mute* n - –∑–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ '
                                      '–±–µ—Å–µ–¥—ã.ü§ê –í–º–µ—Å—Ç–æ n –∫–æ–ª–∏—á–µ—Å—Ç-–≤–æ –º–∏–Ω—É—Ç. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60.‚è∞ –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç'
                                      ' –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–µ—Ä–∞.üßç‚Äç‚ôÇÔ∏è\n*/unmute* - —Ä–∞–∑–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–µ—Å–µ–¥—ãüö´ü§ê'
                                      '. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–µ—Ä–∞.üßç‚Äç‚ôÇÔ∏è\n*/selfdata* - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–π'
                                      ' —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.üòéüìã\n*/users* - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∞—Ç—É.üí¨üìã\n*/warn* - '
                                      '–≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.‚ö†Ô∏è\n*/unwarn* - —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.üö´‚ö†Ô∏è\n\n*/random*'
                                      ' - –∏–≥—Ä–∞ "—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ".ü§îüî¢\n*/rock* - –ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞.ü•å‚úÇÔ∏èüìÑ\n*/fish*'
                                      ' - –∏–≥—Ä–∞ "—Ä—ã–±–∞–ª–∫–∞".üé£\n\n*/based* - –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—á–∫–∞–º, –∏–≥—Ä–∞–º –∏ —Ç.–¥.üêàüñ•',
                     parse_mode='Markdown', reply_markup=keyboard)

    with open('floppa_help.jpg', 'rb') as image_help:
        bot.send_photo(message.chat.id, image_help)


def warn_user(message):
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        username = message.reply_to_message.from_user.username
        firstname_user = message.reply_to_message.from_user.first_name

        sender_status = bot.get_chat_member(chat_id, message.from_user.id).status

        if sender_status == 'administrator' or sender_status == 'creator':
            user_status = bot.get_chat_member(chat_id, user_id).status
            if user_status == 'administrator' or user_status == 'creator':
                bot.reply_to(message, '–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–≤—è—Ç–µ–π—à–µ–º—É –∞–¥–º–∏–Ω—É –Ω–µ–ª—å–∑—è. –ü–æ—ç—Ç–æ–º—É *–ø–æ—à—ë–ª –Ω–≠—Ö—É–π!* üò°',
                             parse_mode='Markdown')
                with open('floppa_no.jpg', 'rb') as image_no:
                    bot.send_photo(message.chat.id, image_no)
            else:
                conn = sqlite3.connect('personal.sql')
                cur = conn.cursor()

                cur.execute("INSERT INTO warnings (user_id, chat_id, username) VALUES (?, ?, ?)",
                            (user_id, chat_id, username))
                conn.commit()

                utils.point_messages_minus(message.reply_to_message)

                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É', url='https://t.me/tiltyxa'))
                bot.send_message(chat_id,
                             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {firstname_user} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!'
                             f'\n*–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /selfdata* , —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.‚ö†Ô∏è',
                                 reply_markup=keyboard, parse_mode='Markdown')
                utils.point_messages_minus_twenty(message.reply_to_message)
                with open('cry.gif', 'rb') as image_warn:
                    bot.send_animation(message.chat.id, image_warn)

                warnings_count = cur.execute("SELECT COUNT(*) FROM warnings WHERE user_id = ?", (user_id,)).fetchone()[
                    0]
                if warnings_count >= 3:
                    bot.send_message(chat_id, '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.‚ö†Ô∏è *–ü–æ–ª—É—á–∏—Ç–µ –º—É—Ç, —Å—É–∫–∞.*ü§ê',
                                     parse_mode='Markdown')
                    short_mute(message.reply_to_message)

                conn.close()

        else:
            bot.reply_to(message, '*–í—ã –Ω–µ –∞–¥–º–∏–Ω*, –≤–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. üö´',
                         parse_mode='Markdown')
            with open('floppa_no.jpg', 'rb') as image_no:
                bot.send_photo(message.chat.id, image_no)

    else:
        bot.reply_to(message, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ *–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–µ—Ä–∞*üö´‚ÄºÔ∏è',
                     parse_mode='Markdown')
        with open('floppa_sadge.jpg', 'rb') as image_sadge:
            bot.send_photo(message.chat.id, image_sadge)


def unwarn_user(message):
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        firstname_user = message.reply_to_message.from_user.first_name

        sender_status = bot.get_chat_member(chat_id, message.from_user.id).status

        if sender_status == 'administrator' or sender_status == 'creator':
            conn = sqlite3.connect('personal.sql')
            cur = conn.cursor()

            cur.execute("DELETE FROM warnings WHERE user_id = ?", (user_id,))
            conn.commit()

            bot.send_message(chat_id, f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è *{firstname_user}* —Å–±—Ä–æ—à–µ–Ω—ã.üö´‚ö†Ô∏è', parse_mode='Markdown')
            with open('happy.jpg', 'rb') as image_resent:
                bot.send_photo(message.chat.id, image_resent)

            conn.close()

        else:
            bot.reply_to(message, '*–í—ã –Ω–µ –∞–¥–º–∏–Ω*, –≤–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. üö´',
                         parse_mode='Markdown')
            with open('floppa_no.jpg', 'rb') as image_no:
                bot.send_photo(message.chat.id, image_no)

    else:
        bot.reply_to(message, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ *–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–µ—Ä–∞*üö´‚ÄºÔ∏è',
                     parse_mode='Markdown')
        with open('floppa_sadge.jpg', 'rb') as image_sadge:
            bot.send_photo(message.chat.id, image_sadge)


def kick_user(message):
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        firstname_user = message.reply_to_message.from_user.first_name

        sender_status = bot.get_chat_member(chat_id, message.from_user.id).status

        if sender_status == 'administrator' or sender_status == 'creator':
            user_status = bot.get_chat_member(chat_id, user_id).status
            if user_status == 'administrator' or user_status == 'creator':
                bot.reply_to(message, '*–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∞.* –ü–æ—ç—Ç–æ–º—É –∏–¥–∏—Ç–µ –Ω–∞—Ö—É–π, –º–∏—Å—Ç–µ—Ä‚ÄºÔ∏è ',
                             parse_mode='Markdown')
                with open('floppa_no.jpg', 'rb') as image_no:
                    bot.send_photo(message.chat.id, image_no)
            else:
                bot.kick_chat_member(chat_id, user_id)
                bot.reply_to(message, f'–ß–∞—Ç–µ—Ä *{firstname_user}* –±—ã–ª –∫–∞–∑–Ω—ë–Ω –Ω–∞—Ö—É–π —Å –ø–æ–∑–æ—Ä–æ–º. üíÄ',
                             parse_mode='Markdown')
                with open('floppa_strike.jpg', 'rb') as image_kick:
                    bot.send_photo(message.chat.id, image_kick)
        else:
            bot.reply_to(message, '*–í—ã –Ω–µ –∞–¥–º–∏–Ω*, –≤–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. üö´',
                         parse_mode='Markdown')
            with open('floppa_no.jpg', 'rb') as image_no:
                bot.send_photo(message.chat.id, image_no)
    else:
        bot.reply_to(message, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ *–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–µ—Ä–∞*üö´‚ÄºÔ∏è',
                     parse_mode='Markdown')
        with open('floppa_sadge.jpg', 'rb') as image_sadge:
            bot.send_photo(message.chat.id, image_sadge)


def mute_user(message):
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        firstname_user = message.reply_to_message.from_user.first_name

        sender_status = bot.get_chat_member(chat_id, message.from_user.id).status
        user_status = bot.get_chat_member(chat_id, user_id).status

        if sender_status == 'administrator' or sender_status == 'creator':
            if user_status == 'administrator' or user_status == 'creator':
                bot.reply_to(message, '–í—ã —Å—É–∫–∞ –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∞. –ü–æ—ç—Ç–æ–º—É *–ø–æ—à—ë–ª –Ω–≠—Ö—É–π!* üò°',
                             parse_mode='Markdown')
                with open('big-floppa.gif', 'rb') as gif_nahuy:
                    bot.send_animation(message.chat.id, gif_nahuy)
            else:
                duration = 60
                arguments = message.text.split()[1:]
                if arguments:
                    try:
                        duration = int(arguments[0])
                    except ValueError:
                        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç. ‚è∞')
                        return
                    if duration < 1:
                        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç *(–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã)*. ‚è∞',
                                         parse_mode='Markdown')
                        return
                    if duration > 1440:
                        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç *(–ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –±–æ–ª–µ–µ —á–µ–º '
                                                          '–Ω–∞ –¥–µ–Ω—å)*. ‚è∞', parse_mode='Markdown')
                        return

                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –∫–∞–∫–æ–π –æ–Ω —Ö—É–µ—Å–æ—Å', url='https://t.me/tiltyxa'))

                bot.restrict_chat_member(chat_id, user_id, until_date=time.time()+duration*60)
                bot.send_message(message.chat.id, f'–ó–∞–≤–∞–ª–∏–ª –µ–±–ª–∏—â–µ, *{firstname_user}*‚ÄºÔ∏è –ó–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç‚ÄºÔ∏è ',
                                 reply_markup=keyboard, parse_mode='Markdown')
                with open('floppa_mute.gif', 'rb') as gif_mute:
                    bot.send_animation(message.chat.id, gif_mute)
                utils.point_messages_minus_200(message)

        else:
            bot.reply_to(message, '*–í—ã –Ω–µ –∞–¥–º–∏–Ω*, –≤–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. üö´',
                         parse_mode='Markdown')
            with open('floppa_no.jpg', 'rb') as image_no:
                bot.send_photo(message.chat.id, image_no)

    else:
        bot.reply_to(message, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ *–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–µ—Ä–∞*üö´‚ÄºÔ∏è',
                     parse_mode='Markdown')
        with open('floppa_sadge.jpg', 'rb') as image_sadge:
            bot.send_photo(message.chat.id, image_sadge)


def unmute_user_all(message):

    if message.reply_to_message:

        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        firstname_user = message.reply_to_message.from_user.first_name

        sender_status = bot.get_chat_member(chat_id, message.from_user.id).status

        if sender_status == 'administrator' or sender_status == 'creator':

            bot.restrict_chat_member(chat_id, user_id, can_send_messages=True, can_send_other_messages=True,
                                     can_send_media_messages=True, can_add_web_page_previews=True,
                                     can_pin_messages=True, can_invite_users=True, can_change_info=True,
                                     can_send_polls=True)

            bot.reply_to(message, f'–ß–∞—Ç–µ—Ä *{firstname_user}* —Ä–∞–∑–º—É—á–µ–Ω. –°–ª–µ–¥–∏ –∑–∞ –±–∞–∑–∞—Ä–æ–º.üë∫ ',
                         parse_mode='Markdown')
            with open('floppa_free.gif', 'rb') as gif_free:
                bot.send_animation(message.chat.id, gif_free)
        else:

            bot.reply_to(message, '*–í—ã –Ω–µ –∞–¥–º–∏–Ω*, –≤–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. üö´',
                         parse_mode='Markdown')
            with open('floppa_no.jpg', 'rb') as image_no:
                bot.send_photo(message.chat.id, image_no)
    else:
        bot.reply_to(message, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ *–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–µ—Ä–∞*üö´‚ÄºÔ∏è',
                     parse_mode='Markdown')
        with open('floppa_sadge.jpg', 'rb') as image_sadge:
            bot.send_photo(message.chat.id, image_sadge)


def start_game(message):
    chat_id = message.chat.id
    config.chat_states[chat_id] = {'guessing_number': random.randint(1, 20)}
    bot.send_message(chat_id, '–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ *–æ—Ç 1 –¥–æ 20*. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å! ü§ì', parse_mode='Markdown')


def play(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏–≥—Ä–∞ –∏ –ø—Ä–æ—à–ª–æ –ª–∏ 15 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
    if user_id in config.last_play_time_rps and time.time() - config.last_play_time_rps[user_id] < 15:
        bot.send_message(message.chat.id, "*–ß–µ–ª, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ* –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π.üë∫",
                         parse_mode='Markdown')
        return

    inline_markup = utils.create_rps_inline_markup()
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüòº:", reply_markup=inline_markup)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    config.last_play_time_rps[user_id] = time.time()


def fishing(message, user_id):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏–≥—Ä–∞ –∏ –ø—Ä–æ—à–ª–æ –ª–∏ 20 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
    if user_id in config.last_play_time_fish and time.time() - config.last_play_time_fish[user_id] < 20:
        bot.reply_to(message, "*–ß–µ–ª, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ* –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π.üë∫", parse_mode='Markdown')
        return

    # –†–∞–Ω–¥–æ–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä—ã–±—É –∏–ª–∏ –º—É—Å–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–π–º–∞–ª
    if random.random() < 0.57:  # 57% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–π–º–∞—Ç—å —Ä—ã–±—É
        caught_item = random.choice(config.fishes)
        if caught_item == '–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∞üê†':
            bot.send_message(message.chat.id, f"–í—ã –ø–æ–π–º–∞–ª–∏ *{caught_item}*! –®–ª—ë–ø–∞ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π. üòº –î–µ—Ä–∂–∏ —Å–≤–æ–∏ 20 –ø–µ–ª—å–º–µ–Ω–µ–π. ‚¨ÜÔ∏è‚úÖü•ü",
                         parse_mode='Markdown')
            utils.point_messages_plus_twenty(user_id)
        elif caught_item == '–ñ—ë–ª—Ç–∞—è —Ä—ã–±–∞üê°':
            bot.send_message(message.chat.id, f"–í—ã –ø–æ–π–º–∞–ª–∏ *{caught_item}*! –®–ª—ë–ø–∞ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π. üòº –î–µ—Ä–∂–∏ —Å–≤–æ–∏ 10 –ø–µ–ª—å–º–µ–Ω–µ–π. ‚¨ÜÔ∏è‚úÖü•ü",
                         parse_mode='Markdown')
            utils.point_messages_plus_ten(user_id)
        elif caught_item == '–°–∏–Ω—è—è —Ä—ã–±–∞üêü':
            bot.send_message(message.chat.id, f"–í—ã –ø–æ–π–º–∞–ª–∏ *{caught_item}*! –ú–æ–ª–æ–¥—á–∏–∫. üëè –î–µ—Ä–∂–∏ —Å–≤–æ–∏ 5 –ø–µ–ª—å–º–µ–Ω–µ–π. ‚¨ÜÔ∏è‚úÖü•ü",
                         parse_mode='Markdown')
            utils.point_message_plus_five(user_id)
        elif caught_item == '–ö–æ—Ä–∏—á–Ω–µ–≤–∞—è —Ä—ã–±–∞üü´':
            bot.send_message(message.chat.id, f"–í—ã –ø–æ–π–º–∞–ª–∏ *{caught_item}*! –ù–æ—Ä–º–∞—Å. üëå –î–µ—Ä–∂–∏ —Å–≤–æ–∏ 2 –ø–µ–ª—å–º–µ–Ω—è.‚¨ÜÔ∏è‚úÖü•ü",
                         parse_mode='Markdown')
            utils.point_messages_plus_two(user_id)

    else:
        caught_item = random.choice(config.trash)
        if caught_item == '–ë—ñ–º–±–∞üí£üí•':
            bot.reply_to(message, f"–í–æ—É, —á–µ–ª! –¢—ã –ø–æ–π–º–∞–ª *{caught_item}*! –®–ª—ë–ø–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç –¥–∏–∑—Ä–µ—Å–ø–µ–∫—Ç! üò§ –ó–∞–±–µ—Ä–∏—Ç–µ 20"
                                  f" –ø–µ–ª—å–º–µ–Ω–µ–π —É –Ω–µ–≥–æ! ‚ùå‚¨áÔ∏èü•ü", parse_mode='Markdown')
            utils.point_messages_minus_twenty_fishing(user_id)
        elif caught_item == '–ü–∞–∫–µ—Ç—ãüõç':
            bot.reply_to(message, f"–¢—ã –ø–æ–π–º–∞–ª *{caught_item}*! –ò –∑–∞—á–µ–º –æ–Ω–∏ –º–Ω–µ? üòæ –ó–∞–±–µ—Ä–∏—Ç–µ 10 –ø–µ–ª—å–º–µ–Ω–µ–π —É –Ω–µ–≥–æ! ‚ùå‚¨áÔ∏èü•ü",
                         parse_mode='Markdown')
            utils.point_messages_minus_ten(user_id)
        elif caught_item == '–ë–∞–Ω–∫–∏ü•´ü•´':
            bot.reply_to(message, f"–¢—ã –ø–æ–π–º–∞–ª *{caught_item}*! –ù–µ –ø–æ–≤–µ–∑–ª–æ, –æ–Ω–∏ –º–Ω–µ –Ω–µ –Ω—É–∂–Ω—ã. üê± –ó–∞–±–µ—Ä–∏—Ç–µ 6 –ø–µ–ª—å–º–µ–Ω–µ–π "
                                  f"—É –Ω–µ–≥–æ! ‚ùå‚¨áÔ∏èü•ü", parse_mode='Markdown')
            utils.point_messages_minus_fishing(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    config.last_play_time_fish[user_id] = time.time()


